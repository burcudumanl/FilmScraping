import os
import re
import io

import google.generativeai as genai
from imdb import Cinemagoer
from PIL import Image
from google.oauth2 import service_account
from google.cloud import aiplatform
from vertexai.preview.vision_models import ImageGenerationModel

# Gemini API key
genai.configure(api_key="AIzaSyAz_NiDVtn9EHxVfs7JaJB2GrP9gJSmths")
gemini = genai.GenerativeModel(model_name="gemini-2.0-flash")


def get_movie_storyline(title: str) -> str:
    ia = Cinemagoer()
    movies = ia.search_movie(title)
    if movies:
        movie = ia.get_movie(movies[0].movieID)
        if 'plot outline' in movie:
            return movie['plot outline']
    return "No storyline available."


def generate_dialogue(
    title: str,
    description: str,
    storyline: str,
    char_count: int,
    max_words: int
) -> str:
    prompt = (
        f"Create a dialogue based on the movie '{title}'. "
        f"Description: {description}. Storyline: {storyline}. "
        f"Use approx. {char_count} characters, max {max_words} words. "
        "Format as 'Speaker: text' with blank lines between lines."
    )
    response = gemini.generate_content(prompt)
    raw = getattr(response, 'text', None)
    if not raw and hasattr(response, 'candidates') and response.candidates:
        cand = response.candidates[0]
        raw = getattr(cand, 'content', None) or str(cand)
    if not raw:
        raw = str(response)
    m = re.search(r'text:\s*"(.*?)"\s*}', raw, re.S)
    return m.group(1).strip() if m else raw.strip()


def generate_scene_description(
    title: str,
    description: str,
    storyline: str,
    dialogue: str
) -> str:
    prompt = (
        f"Generate a vivid scene description for '{title}'. "
        f"Based on: {description}. Storyline: {storyline}. "
        f"Include the following dialogue in mind: \"{dialogue}\". "
        "Keep under 50 words."
    )
    response = gemini.generate_content(prompt)
    raw = getattr(response, 'text', None)
    if not raw and hasattr(response, 'candidates') and response.candidates:
        raw = getattr(response.candidates[0], 'content', None) or str(response.candidates[0])
    if not raw:
        raw = str(response)

    m = re.search(r'text:\s*"(.*?)"\s*}', raw, re.S)
    return m.group(1).strip() if m else raw.strip()


def generate_image(
    title: str,
    description: str,
    storyline: str,
    dialogue: str,
    location: str,
    style: str,
    project: str = "polar-storm-459212-h0",
    credentials_path: str = r"/Users/burcudumanl/Desktop/226proje-2/polar-storm-459212-h0-0e7b074046b1.json",
    region: str = "us-central1"
) -> str:
    if not os.path.exists(credentials_path):
        return "Image generation failed: Invalid credentials path."

    scene_desc = generate_scene_description(title, description, storyline, dialogue)

    prompt = (
        f"Generate a {style}-style photorealistic photograph of {location}, "
        f"depicting the following scene: {scene_desc}. "
        "Do not add any text, subtitles, dialogue, or watermarks to the image. "
        "Only generate the visual scene. Do not embed any written content.\n\n"
        f"Contextual dialogue (NOT to be displayed in the image):\n{dialogue}"
    )

    try:
        creds = service_account.Credentials.from_service_account_file(credentials_path)
        aiplatform.init(project=project, location=region, credentials=creds)

        model = ImageGenerationModel.from_pretrained("imagen-3.0-generate-002")
        response = model.generate_images(
            prompt=prompt,
            number_of_images=1
        )
        if not response or not hasattr(response, 'images') or len(response.images) == 0:
            return "Image generation failed: No images were generated by the model."

        img = response.images[0]

        if not hasattr(img, "save"):
            img = Image.open(io.BytesIO(img.image_bytes))

        out_path = "generated.png"
        img.save(out_path)
        return out_path

    except Exception as e:
        return f"Image generation failed: {e}"





